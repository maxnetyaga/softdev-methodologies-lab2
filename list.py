type char = str

class List:
    def __init__(self) -> None:
        pass
        
    def length(self) -> int:
        '''Операція визначення довжини списку.

        Якщо список непорожній, то ця операція повинна повертати кількість елементів у списку.
        Якщо список порожній, то ця операція повинна повертати 0.
        '''
        pass

    def get(self, index: int) -> char:
        '''Операція отримання елементу списку на довільній позиції.

        У випадку передачі некоректного значення позиції (наприклад, від’ємне число, або число, більше за індекс
        останнього елементу списку) метод повинен генерувати виключну ситуацію.
        '''
        pass

    def append(self, element: char) -> None:
        '''Операцію додавання елементу в кінець списку.'''
        pass

    def extend(self, elements: "List") -> None:
        '''Операцію розширення списку.

        Метод приймає інший список та додає до поточного списку усі елементи останнього.
        При цьому подальші зміни в другий список не повинні впливати на перший.
        '''
        pass

    def delete(self, index: int) -> char:
        '''Операцію видалення елементу зі списку на вказаній позиції.

        Метод повинен повертати значення того елементу, який видаляється.
        Нумерація елементів списку починається з 0.
        У випадку передачі некоректного значення позиції (наприклад, від’ємне число, або число, більше за індекс
        останнього елементу списку) метод повинен генерувати виключну ситуацію
        '''
        pass

    def deleteAll(self, element: char) -> None:
        '''Операцію видалення елементів зі списку за значенням.
        
        Метод видаляє зі списку усі елементи, які за значенням відповідають шуканому.
        У випадку передачі елемента, який у списку відсутній, жодні зміни до списку не застосовуються.
        '''
        pass

    def clone(self) -> "List":
        '''Операція копіювання списку.

        При виклику повинен створити копію поточного списку та повернути її.
        '''
        pass

    def reverse(self) -> None:
        '''Операція обернення списку.

        Метод повинен змінити порядок елементів у поточному списку задом наперед.
        Елемент, що був останнім стане першим, передостаннім — другим, … а перший — останнім.
        '''
        pass

    def findFirst(self, element: char) -> int:
        '''Операція пошуку елемента за значенням з голови списку.

        Метод повинен знайти перший елемент у списку, що дорівнює шуканому та повернути його позицію.
        Нумерація елементів списку починається з 0.
        У випадку відсутності шуканого елемента у списку, метод повертає -1
        '''
        pass

    def findLast(self, element: char) -> int:
        '''Операція пошуку елемента за значенням з хвоста списку.

        Метод повинен знайти останній елемент у списку, що дорівнює шуканому та повернути його позицію.
        Нумерація елементів списку починається з 0.
        У випадку відсутності шуканого елемента у списку, метод повертає -1.
        '''
        pass

    def clear(self) -> None:
        '''Операцію очищення списку.

        Метод видаляє усі елементи списку.
        '''
        pass